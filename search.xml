<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NCPC 初賽 2020心得</title>
    <url>/2020/09/27/2020%20NCPC%E5%88%9D%E8%B3%BD%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h1 id="NCPC-初賽-2020心得"><a href="#NCPC-初賽-2020心得" class="headerlink" title="[NCPC 初賽 2020心得]"></a>[NCPC 初賽 2020心得]</h1><p>難得這次我有賽中把題目看完</p>
<hr>
<h2 id="以下題敘"><a href="#以下題敘" class="headerlink" title="以下題敘"></a>以下題敘</h2><p>PA : r=qx+py，給正整數r,p,q，求|x|+|y|最小 (r&lt;pq &amp; r&lt;10^9 assume that 1&lt;p,q&lt;10^9)</p>
<p>PB : 奇數魔方陣。給定第一列數字，把整個大小n^2的魔方陣求出。(魔方陣：每行、列、主副對角線個別和相等) (n&lt;=5 &amp; n is odd)</p>
<p>PC : 給一棵帶邊權的樹，n個節點，修改q次邊權Wij，求出每次修改後最遠的兩點。(n&lt;=1500 &amp; q&lt;=20 &amp;&amp; &lt;=10筆測資 &amp;&amp; W&lt;=10000)</p>
<p>PD : 有一個以大寫字母組成長度&lt;10^4的字串，以星號(*)結尾。總共有兩次的變動，第一次為「將最後一個字母丟到第一個，重複n-1次」，第二次為「將原字串與n-1個字串以字典序排序」，然後依序取每個字串的最後一個字母。<br>現在給定一字串為「每個字串的最後一個字母」，請推出原字串為何。</p>
<p>PE : 給定一個大小為n^2陣列L，n&lt;1000，L[i][j]表示i與j相鄰的距離(L[1][2]=1 L[1][3]=2 L[2][3]雖然可以間接走到，但沒有相鄰因此為無限大)，題序為全點對最短情況下modify一邊權後響多少點對被變更(變更使得維持全點對最短)(0&lt;邊權&lt;2^32)</p>
<p>PF : 給m,n表示1~m中任意數量數字和=n，有全部列出，無則輸出-1 (m&lt;=n &amp; 8&lt;=n&lt;=30 &amp; 共10筆測資)</p>
<p>PG : 給定d[0][0]，用下面圖片那串建一個(N-1)*(M-1)的table，給A,B,L取max(左上d[A][B]與右下d[A+L-1][B+L-1]的矩形範圍內相鄰差)</p>
<h2 id="今日總過程"><a href="#今日總過程" class="headerlink" title="今日總過程"></a>今日總過程</h2><p><a href="https://theriseofdavid.github.io/">江大衞</a> 昨天半夜來我家吃宵夜、改Codebook，還有互相打氣(?<br>隔天10點快半跟原齊、文元會合吃早(午)餐，然後買了電瓶-&gt;(茶)<br>進考場後說甚麼不能動電腦跟鍵盤，欸欸，都已經12:43了，剩17分鐘就要考了，說好的30分鐘測機呢？其他組去問都沒有用，然後我就上前去跟考官抗議，嗆到他一句回不出時他就摸摸鼻子去跟隔壁間考官說上台宣布開始測機(只剩15分鐘)。<br>宣布時有說到有提供印表機，但途中印表機卡紙(問題真多啊= = )<br>我快速的把全部題目看過，PF文元跟原齊正在解，我發現PD是前年新北市賽那題(「外星人的訊息」，解法我記得是BWT(Burrows–Wheeler Transform))，但我當年沒好好研究這算法(抓到，當年我喇部份分。子權你再不好好訂正啊!)，只好憑印象跟隊友說解法(因為事先說好我這次不會上機(怕我毒瘤code))。<br>快2小時過去，PF WA了兩次AC了，「中間時段」原齊也有把PD刻好了，<br>「中間時段」為-&gt;討論PD跟PC的解法，PC這題我跟文元說是樹直徑，但他說這題帶權重，我不好好的證明就放棄了這個念頭(如果我的實力好一點而且會在場上細心證明的話這題就AC了)。然後文元覺得是樹鏈剖分套BIT拉出每一條，雖然聽起來合理，但後來看Scoreboard得知很多人AC，發覺這題應該沒那麼毒瘤。<br>原齊把PD上傳後吃了WA，後來手動列出很多比測資都還是不知道哪裡假解<br>而PE跟PG我覺得很勞動而且PG的多次查詢範圍相臨差最大想不到優質的解法，所以都skip<br>PB跟PA也想不到好的解法，於是整場大燒機!!~~</p>
<h3 id="比賽結束"><a href="#比賽結束" class="headerlink" title="(比賽結束)"></a>(比賽結束)</h3><hr>
<h2 id="想法與心得"><a href="#想法與心得" class="headerlink" title="想法與心得"></a>想法與心得</h2><p>賽後我直接問 江文吉 PC怎麼AC的，他的隊友跟我說是樹直徑。<br>文元認為整個團隊還沒配合的很好，原齊跟我認為是實力不夠導致PA想不到是「擴展歐幾里得」(而且也不知道這是什麼)，還有PC沒法好好證明帶邊權樹直徑DFS兩次的正確性，後來文元很直白跟我說我都在吃老本、沒在動腦，看到題目就會翻以前解過哪些相似的並困在那思路中，更何況題目都會變化。<br>但我認為我還是得好好地刷題，刺激不同且新的思路還有把想法轉為code並穩定輸出，原齊則想往快速開題還有數論發展。</p>
<h2 id="個人感想"><a href="#個人感想" class="headerlink" title="個人感想"></a>個人感想</h2><p>由於高中時期我幾乎是一人獨來獨往，組隊是用湊人頭的，很少有多次合作並賽後檢討的機會，更何況我都不知道我的「團隊配合」與「解題思路」有這麼多需要改進(真的直到文元指出我才知道)，這次多人正式賽真的學到了不少，希望兩位能繼續收留我QAQ</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>NCPC</tag>
        <tag>2020</tag>
      </tags>
  </entry>
  <entry>
    <title>NTHU 10322 PC 費式數列與矩陣快速冪</title>
    <url>/2019/02/21/%5BNTHU%5D10322%20PC%20%E8%B2%BB%E5%BC%8F%E6%95%B8%E5%88%97%E8%88%87%E7%9F%A9%E9%99%A3%E5%BF%AB%E9%80%9F%E5%86%AA/</url>
    <content><![CDATA[<h1 id="NTHU-10322-PC-費式數列與矩陣快速冪"><a href="#NTHU-10322-PC-費式數列與矩陣快速冪" class="headerlink" title="[NTHU]10322 - PC - 費式數列與矩陣快速冪"></a>[NTHU]10322 - PC - 費式數列與矩陣快速冪</h1><p>題目連結:<a href="https://acm.cs.nthu.edu.tw/problem/10322/">https://acm.cs.nthu.edu.tw/problem/10322/</a></p>
<p>一題矩陣快速冪裸題(題目就表明(?)</p>
<p>當然是好好地把矩陣的乘法定義定好，注意一些0/1擺放的細節，把其套上快速冪的模板，就大功告成了。&gt;&lt;</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;O2&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jizz ios_base::sync_with_stdio(false) , cin.tie(NULL) , cout.tie(NULL);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> po pop_back;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CN cout&lt;&lt;<span class="meta-string">&quot;\n&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> m 100000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">array</span>&lt;<span class="built_in">array</span>&lt;<span class="keyword">int</span>,2&gt;,2&gt; Matrix;</span><br><span class="line">Matrix <span class="keyword">operator</span>*(Matrix A , Matrix B)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix C;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>;k++)</span><br><span class="line">                C[i][j]=(C[i][j]%m+(A[i][k]%m*B[k][j]%m)%m)%m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Matrix <span class="title">power</span><span class="params">(Matrix A,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix ans=&#123;&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;&#125;;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line">            ans=ans*A;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        A=A*A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jizz;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; num || num==<span class="number">0</span>)</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Matrix A=&#123;&#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;&#125;;</span><br><span class="line">            Matrix C=power(A,num<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; C[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>NTHU</tag>
        <tag>矩陣快速冪</tag>
        <tag>數論</tag>
      </tags>
  </entry>
  <entry>
    <title>Sprout OJ RMQ練習</title>
    <url>/2018/12/26/%5BSprout%20OJ%5D%20No.80%20RMQ%E7%B7%B4%E7%BF%92/</url>
    <content><![CDATA[<h1 id="資訊之芽算法班-gt-RMQ模板"><a href="#資訊之芽算法班-gt-RMQ模板" class="headerlink" title="資訊之芽算法班-&gt;RMQ模板"></a>資訊之芽算法班-&gt;RMQ模板</h1><p>題目來源:<a href="https://neoj.sprout.tw/problem/80/">https://neoj.sprout.tw/problem/80/</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> gcc optimize(<span class="meta-string">&quot;o2&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO cin.tie(NULL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> lson,rson;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line">Node segtr[MAXN*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> str[MAXN];</span><br><span class="line"><span class="keyword">int</span> ptr=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    segtr[index].l=l;</span><br><span class="line">    segtr[index].r=r;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r<span class="number">-1</span>)</span><br><span class="line">        segtr[index].data=str[l];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> lson=segtr[index].lson=++ptr;</span><br><span class="line">        <span class="keyword">int</span> rson=segtr[index].rson=++ptr;</span><br><span class="line">        build(l,mid,lson);</span><br><span class="line">        build(mid,r,rson);</span><br><span class="line">        segtr[index].data=min(segtr[lson].data,segtr[rson].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val,<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(segtr[index].l==segtr[index].r<span class="number">-1</span>)</span><br><span class="line">        segtr[index].data=val;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> lson=segtr[index].lson;</span><br><span class="line">        <span class="keyword">int</span> rson=segtr[index].rson;</span><br><span class="line">        <span class="keyword">int</span> mid=(segtr[index].l+segtr[index].r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;mid) modify(x,val,lson);</span><br><span class="line">        <span class="keyword">else</span> modify(x,val,rson);</span><br><span class="line">        segtr[index].data=min(segtr[lson].data,segtr[rson].data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(segtr[index].l==l &amp;&amp; segtr[index].r==r)</span><br><span class="line">    <span class="keyword">return</span> segtr[index].data;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; segtr[index].l &lt;&lt; &quot; &quot; &lt;&lt; segtr[index].r &lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">int</span> mid=(segtr[index].l+segtr[index].r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> lson=segtr[index].lson;</span><br><span class="line">        <span class="keyword">int</span> rson=segtr[index].rson;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; mid &lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; l &lt;&lt; &quot; &quot; &lt;&lt; r &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; segtr[index].l &lt;&lt; &quot; &quot; &lt;&lt; segtr[index].r &lt;&lt;endl; </span></span><br><span class="line">        <span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> query(l,r,lson);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;=mid) <span class="keyword">return</span> query(l,r,rson);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(query(l,mid,lson),query(mid,r,rson));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;TO;</span><br><span class="line">    <span class="keyword">int</span> T,N,deter,x,y;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str[i];</span><br><span class="line">    build(<span class="number">0</span>,N,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//cout &lt;&lt; segtr[0].l &lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; segtr[0].r &lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; deter &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(deter==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; query(x,y+<span class="number">1</span>,<span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        modify(x,y,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>資料結構</category>
      </categories>
      <tags>
        <tag>SPOJ</tag>
        <tag>線段樹</tag>
      </tags>
  </entry>
  <entry>
    <title>程設(一) 作業1 有趣有用的小東西,心得</title>
    <url>/2020/10/09/%E7%A8%8B%E8%A8%AD(%E4%B8%80)%20%E4%BD%9C%E6%A5%AD1%20%E6%9C%89%E8%B6%A3%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E6%9D%B1%E8%A5%BF,%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<h1 id="程設-一-作業1-有趣有用的小東西-心得"><a href="#程設-一-作業1-有趣有用的小東西-心得" class="headerlink" title="程設(一) 作業1 有趣有用的小東西,心得"></a>程設(一) 作業1 有趣有用的小東西,心得</h1><ol>
<li><strong>由於高中的資訊課從來都沒有L紀的課那麼<del>毒瘤</del>有趣，在寫功課中有感而發而寫了這篇有趣的小東西與大家分享，如果有各方大神有超毒瘤或有趣的玩法記得傳教我OwO</strong></li>
<li><strong>至於以後有遇到有趣的東東就會再寫，但功課解析不會再有（除非那題很毒瘤或有趣）</strong></li>
<li><strong>近期我會盡快架個Blog，有趣的東東都會放在Blog上，希望往後大家能多多造訪Orz</strong></li>
<li><strong>友情連結 -&gt;</strong> <a href="https://blog.jw910731.wtf/blog/">吳文元的Blog</a> <h2 id="先淺談一些有趣的東西"><a href="#先淺談一些有趣的東西" class="headerlink" title="先淺談一些有趣的東西"></a>先淺談一些有趣的東西</h2>為什麼我要先寫有趣的東西呢？因為大部分是寫功課過程中學到的，小部份只是想順道跟大家分享。</li>
</ol>
<blockquote>
<p>懶惰就都define起來啊OwO</p>
</blockquote>
<p>習慣打int的我，就</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int int32_t</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>C語言中沒有布林？（這篇是之前寫的，下一週上課剛好就被提到）</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上課毒L紀說給你錯的輸入格式（？判掉它OAO</p>
</blockquote>
<p>我喜歡的寫法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%...&quot;</span>)!=...)<span class="comment">//&quot;...&quot;是指輸入多少量</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input correct format!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(c=getchar()!=<span class="string">&#x27;\n&#x27;</span> &amp;&amp; c!=EOF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sad之神吳文元喜歡的精簡寫法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%...&quot;</span>)!=...)<span class="comment">//&quot;...&quot;是指輸入多少量</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input correct format!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>為什麼會有人main函式寫signed main() ?</p>
</blockquote>
<p><del>別問你會怕OwO</del><br>好啦，其實C99 ISO/IEC 9899:1999第99,100頁有規定到（如圖）<br><img src="https://i.imgur.com/yyx8gfb.png"></p>
<p>就像把<code>long long int</code>打成<code>long long</code>一樣啦，<strong>粗略來說</strong>就是名字不一樣但性質一樣。</p>
<p>用途就是有人跟我一樣毒瘤到懶的開<code>long long</code>時就<code>#define int long long</code>。</p>
<p>這時就要談到main為什麼只回傳int了 QAQ</p>
<p>又是很毒的C規定標準-&gt; ISO/IEC 9899:201x 第13頁的<a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">Program startup</a>有規定。</p>
<p>然後第14頁的<a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">Program termination</a>有講到<code>main()</code>回傳的<code>return</code>值會丟給<code>exit()</code>。</p>
<p>PS: <code>return</code>是調用堆疊（函數退出），<code>exit</code>是系統調用（進程退出）。</p>
<p>通常<code>return 0</code>是成功，<code>return 1</code><strong>可能</strong>表示失敗，回傳值丟給<code>exit()</code>後會告訴使用者</p>
<p><strong>exit(0)正常結束</strong>或<strong>exit(非0)產生錯誤資訊</strong>，有定義<a href="https://www.freebsd.org/cgi/man.cgi?query=sysexits&apropos=0&sektion=0&manpath=FreeBSD+4.3-RELEASE&format=html">system exit</a>回傳數字是什麼意思。</p>
<p><strong>上面看不懂沒關係，因為總結起來如下面程式碼一樣簡單又簡潔OwO(<del>文元不要打我</del>)</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>你不知道為什麼scanf編譯時吃了warning?</p>
</blockquote>
<p><img src="https://i.imgur.com/S3q1XnO.png"></p>
<p>其實scanf是會回傳值的，只是單純警告你忽略了回傳值（就像宣告了一個變數，但整個程式都沒用到它，就會給你一個warning提醒使用者），在這點到為止，有興趣的看<a href="https://stackoverflow.com/questions/10043841/c-error-ignoring-return-value-of-scanf">這裡</a>，-Wunused-result看<a href="https://stackoverflow.com/questions/40576003/ignoring-warning-wunused-result">這裡</a>。</p>
<blockquote>
<p>題目要求連續輸入直到EOF時(End of File)(ctrl+z是Windows的EOF)(ctrl+d是Linux的EOF)</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正常寫法</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//毒瘤寫法（黑魔法）</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n))&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好啦，其實不是黑魔法，’~’符號只是位元運算子的「not」</p>
<p>舉例 a=101001 ; b=~a ; 那麼 b=010110 (not的這個想法在hw0105的手寫部份可以用的上OwO)</p>
<p>通常EOF是系統跑到文件結尾時，所回傳的信號（-1）</p>
<ul>
<li><strong>因系統而異，不全是-1</strong></li>
</ul>
<p>然後在上面那一篇有說到scanf是會回傳值的，它回傳了EOF(-1)，並將(-1)給not</p>
<p>因此，以8位元二補數舉例表示為： ~(-1) = ~(1111 1111)(二進位) = (0000 0000)(二進位)= 0 (十進位)</p>
<p>那麼，while(~(-1)) = while(0) </p>
<ul>
<li><p><strong>提醒 : ASCII沒有負數(0~127)，因此EOF不是特殊字符。</strong></p>
</li>
<li><p><strong>EOF是被define的 -&gt; <code>#define EOF -1</code></strong></p>
</li>
</ul>
<blockquote>
<p>當你很想輸出後就直接<code>return 0</code>時(1行超讚)</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d+%d=%d&quot;</span>,a,b,a+b),<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="防雷線-以下是作業部份"><a href="#防雷線-以下是作業部份" class="headerlink" title="防雷線(以下是作業部份)"></a>防雷線(以下是作業部份)</h2><hr>
<h2 id=""><a href="#" class="headerlink" title=""></a><hw0101></h2><p>簡單的輸出題。</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><hw0102></h2><p>題目規定要5 digits，所以要判斷是否有輸入錯格式。<br>再來把輸入的數字丟進for裡，每次除以一個從10000開始每次除以10的數字，一直乘進答案裡，輸入的數字記得模掉最前面一位。</p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><hw0103></h2><p>物理算術題。</p>
<p>下面第21行的<code>%.2f</code> , <code>%.3f</code><strong>極粗略上來說</strong>是取四捨五入當第多少位，如果不足位數則補0，如果需要實做輔助看<a href="https://blog.csdn.net/wonglong01/article/details/6074887">這裡</a>。</p>
<h2 id="-3"><a href="#-3" class="headerlink" title=""></a><hw0104></h2><p>我先使用 <code>whereis stdio.h</code> 尋找 stdio.h 的 path，跟著路徑<code>/usr/include/</code>找到stdio.h後將它mv成不同名字（<code>sudo mv stdio.h stdioo.h</code>）(沒加sudo會permission denied，所以提高權限)，改完後回去直接<code>$ make clean</code> <code>$ make</code>會得到”fatal error”，不能過編。但是，如果我把程式裡的<code>#include&lt;stdio.h&gt;</code>砍掉就「可以過編」，但會吃warning，原因在於<code>[-Wimplicit-function-declaration]</code>(隱式宣告函式)也就是C語言有規定，<strong>「對於沒有宣告的函式，自動使用隱式宣告」</strong>。</p>
<p><img src="https://i.imgur.com/oHga5aJ.jpg"></p>
<h2 id="-4"><a href="#-4" class="headerlink" title=""></a><hw0105></h2><h3 id="解釋10進位負數轉16進位"><a href="#解釋10進位負數轉16進位" class="headerlink" title="解釋10進位負數轉16進位"></a>解釋10進位負數轉16進位</h3><p>首先將此十進位數字部份轉成二進位，反碼後加1，4個數字一組轉成16進位（共8組）($2^{4*8}$)。</p>
<p>或是可以參考<a href="https://www.itread01.com/content/1543721235.html">這裡</a>。</p>
<h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus "></a>Bonus <hw0106></h2><p>我先使用<code>whereis cd</code>尋找cd，之後又用<code>ls /bin | grep cd</code>也找不到，於是詢問一下他的type是什麼<code>type cd</code>，出現了以下我簡化後的敘述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd is a function with definition</span><br><span class="line">#Defined in &#x2F;usr&#x2F;share&#x2F;fish&#x2F;functions&#x2F;cd.fish</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>在fish-shell，cd是個function（因為我的是fish-shell）。<br>但如果要查bash，那<code>echo &quot;type cd&quot; | bash</code>或<code>echo &quot;type cd&quot; | sh</code>它會超貼心的說<code>cd is a shell builtin</code>。</p>
<p>PS: 讚嘆余原齊大神只用<code>which cd</code>揍掉這題m(_ _)m</p>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>作業</tag>
        <tag>有趣的東西</tag>
      </tags>
  </entry>
  <entry>
    <title>TIOJ 1410. Comiket</title>
    <url>/2018/12/22/%5BTIOJ%5D%201410.%20Comiket/</url>
    <content><![CDATA[<h1 id="TIOJ-1410-Comiket"><a href="#TIOJ-1410-Comiket" class="headerlink" title="TIOJ 1410. Comiket"></a>TIOJ 1410. Comiket</h1><p>題目來源：<a href="https://tioj.ck.tp.edu.tw/problems/1410">https://tioj.ck.tp.edu.tw/problems/1410</a><br>我的想法很直觀，就是用array儲存入和出的人(記得出的時間點也算，所以要加1)，然後掃過去紀錄時間軸的max值。</p>
<p>PS:我最後發現我這樣寫不管是時間上還是空間上都很爛，所以我去看了幾位大神的寫法才發現這題可以用離散化或是用map揍掉 m(_ _)m</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> gcc optimize(o2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long int </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios_base::sync_with_stdio(false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO cin.tie(NULL)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> str[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IOS;TO;</span><br><span class="line">    <span class="keyword">int</span> range=<span class="number">0</span>,a,b,n,maxu,ans;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="number">0</span>;maxu=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            str[a]++;</span><br><span class="line">            b+=<span class="number">1</span>;</span><br><span class="line">            str[b]--;</span><br><span class="line">            range=max(range,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=range;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            maxu+=str[i];</span><br><span class="line">            ans=max(maxu,ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>演算法</category>
      </categories>
      <tags>
        <tag>TIOJ</tag>
        <tag>時間標記</tag>
        <tag>前綴和</tag>
      </tags>
  </entry>
</search>
